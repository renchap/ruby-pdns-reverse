h1. ruby-pdns-reverse

This is a ruby-pdns (http://code.google.com/p/ruby-pdns/) module to allow easy management of reverse DNS using PowerDNS.

h2. Requirements

This module require ruby-pdns 0.5.0 with the regexp patch (http://groups.google.com/group/ruby-pdns-users/browse_thread/thread/35065dd3fe4f02a4). 
You also need to change line 6 of ruby-pdns/lib/pdns/response.rb :
<pre><code>VALIDQTYPES = [:A, :CNAME, :NS, :SRV, :MX, :TXT, :PTR]</code></pre>

h2. Features

* Answer PTR requests for configured IP ranges, using a generated hostname (12.34.56.78 will be associated with 12-34-56-78.default_domain)
* Resolves back generated reverse DNS entries to original IP

h2. TODO

* Support custom reverses using a simple text file as database

h2. Install

* Install ruby-pdns
* Add these lines to pdns-ruby-backend.cfg (remplace with your own domains/subnets) :
<pre><code># ruby-pdns-reverse configuration

# Domains for which we should answer A requests (should be all your domains used for reverse DNS)
reverse.domains = reverse.domain1.tld,reverse.domain2.tld
# Subnets for which we should provide reverse DNS entries, here 192.168.0.0/24 and 10.11.0.0/16
reverse.subnets = 192.168.0,10.11
# Default domain, used to generate reverse DNS entries when the requested IP/reverse is not in the database
# 12.34.56.78 will be associated with 12-34-56-78.default_domain
reverse.default_domain = reverse.domain1.tld</code></pre>
* Drop reverse.pdns in your configurer ruby-pdns records directory (/etc/pdns/records with default configuration)
* ruby-pdns should load automaticaly the reverse.pdns module, and start answering

h2. Credits

* Renaud Chaput
