require 'singleton'

module Pdns
  # Domains for reverse DNS
  domains = Pdns.config.get_module_config('reverse')['domains'].split(',')
  
  # Subnets 
  subnets = Pdns.config.get_module_config('reverse')['subnets'].split(',')

  default_domain = Pdns.config.get_module_config('reverse')['default_domain']

  class ReverseDatabase
    include Singleton

    def initialize
      @database = nil
      if Pdns.config.get_module_config('reverse')['database']
        @database_path = Pdns.config.get_module_config('reverse')['database']
      else
        @database_path = '/etc/powerdns/reverse-database.txt'
      end
      @content = nil
      @last_update = nil
    end

    def content
      unless @content
        @entries = Hash.new
        File.foreach(@database_path) do |line|
          line.strip!
          # Skip comments
          next if line[0..0] == '#'
          row = line.split(',')
          row[0].strip!
          if row[0] and row[0].match(/^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$/) and row[1]
            # Valid entry
            @entries[row[0]] = row[1].strip
          end
        end
      end
      @entries
    end

    def self.get_reverse_from_ip address
      self.instance.content[address]
    end

    def self.get_ip_from_reverse reverse
      result = self.instance.content.find{ |e| e[1] == reverse }
      return result[0] if result and result[0]
    end
  end
  # Private methods

  # We register for the subdomain
  domains.each do |domain|
    regexp = Regexp.new(".+\.#{domain.gsub('.','\\.')}")
    newrecord(regexp) do |query, answer|
      # The return type is always A
      answer.qtype :A

      # Look if the query is a valid reverse from our database
      if(address = ReverseDatabase.get_ip_from_reverse(query[:qname]))
        answer.content address
      else
        # Try to find the IP from the query, if this is the default domain
        if domain == default_domain
          reverse = query[:qname]
          match = reverse.match(Regexp.new('([0-9]+-[0-9]+-[0-9]+-[0-9]+)\\.'+domain.gsub('.','\\.')))
          if match and match[1]
            address = match[1].gsub('-', '.')
            answer.content address
          end
        end
      end
    end
  end

  # We register for the IP ranges
  subnets.each do |subnet|
    regexp = Regexp.new(".+\\.#{subnet.split('.').reverse.join('.').gsub('.','\\.')}\\.in-addr\\.arpa")

    newrecord(regexp) do |query, answer|
      # Get the queried IP address from the request
      address = query[:qname].match(/([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)\.in-addr\.arpa/)[1].split('.').reverse.join('.')

      # Set the PTR type answer
      answer.qtype :PTR

      # Look if the IP has a custom reverse DNS
      if(reverse = ReverseDatabase.get_reverse_from_ip(address))
        answer.content(reverse)
      else
        # Default reverse
        answer.content(address.gsub('.', '-')+'.'+default_domain)
      end
    end
  end

end

# vi:tabstop=2:expandtab:ai:filetype=ruby:sw=2:softtabstop=2 
